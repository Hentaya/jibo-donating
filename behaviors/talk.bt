{
    "1": {
        "id": 1,
        "class": "Sequence",
        "name": "",
        "options": {},
        "children": [
            "5e85351e-f3b8-4709-ae26-8c210c30403b",
            "14606278-507a-416e-b09a-dccfb358f1a5",
            "355c6836-e96d-4764-b244-c647dac8f6f0"
        ],
        "decorators": [
            "56364102-c1a9-4b30-b9f8-b44357ae1615"
        ]
    },
    "meta": {
        "version": 1
    },
    "355c6836-e96d-4764-b244-c647dac8f6f0": {
        "id": "355c6836-e96d-4764-b244-c647dac8f6f0",
        "class": "PlayAnimation",
        "name": "",
        "options": {
            "animPath": "excited.keys",
            "config": [
                "(animation) => {",
                "}"
            ]
        },
        "asset-pack": "core",
        "parent": 1
    },
    "5e85351e-f3b8-4709-ae26-8c210c30403b": {
        "id": "5e85351e-f3b8-4709-ae26-8c210c30403b",
        "class": "Listen",
        "name": "",
        "options": {
            "getOptions": [
                "() => {",
                "    let options = {",
                "        heyJibo: false,",
                "        detectEnd: false,",
                "        incremental: true,",
                "        authenticateSpeaker: ''",
                "    }",
                "    return options;",
                "}"
            ],
            "rule": "inv.rule",
            "onResult": [
                "(listener) => {",
                "  var apiai = require('apiai');",
                "",
                "  var app = apiai(\"29b0b8b628c84f85aff0a9cb0a93009c\");",
                "",
                "  listener.on('hey-jibo', function(asrResult, speakerIds) {",
                "      // available if heyJibo is set to true",
                "      notepad.heardHeyJibo = true; //example variable notepad.heardHeyJibo",
                "    });",
                "",
                "    listener.on('cloud', function(asrResult, speakerIds) {",
                "      // always available",
                "      console.log('cloud', asrResult, speakerIds);",
                "      var request = app.textRequest(asrResult.Input);",
                "",
                "      request.on('response', function(response) {",
                "          console.log(response);",
                "          notepad.ai = response; //example variable book defined from rule",
                "      });",
                "",
                "      request.on('error', function(error) {",
                "          console.log(error);",
                "      });",
                "",
                "      request.end();",
                "    });",
                "",
                "    listener.on('end', function(asrResult, speakerIds) {",
                "      // available if detectEnd is set to true",
                "      notepad.heardEnd = true; //example variable notepad.heardEnd",
                "    });",
                "}"
            ]
        },
        "asset-pack": "core",
        "parent": 1
    },
    "14606278-507a-416e-b09a-dccfb358f1a5": {
        "id": "14606278-507a-416e-b09a-dccfb358f1a5",
        "class": "TextToSpeechJs",
        "name": "",
        "options": {
            "getWords": [
                "(callback) => {",
                "  const fetch = require('node-fetch');",
                "  function getPayInfo(success){",
                "      fetch('https://connect.squareup.com/v2/locations/CBASEN-tsVe1Eh6CkgzxstHISNY/transactions', {headers: {'Authorization': 'Bearer sandbox-sq0atb-7YwbUgRwQHyMoNoNL1Laeg'}})",
                "      .then(res => res.json())",
                "      .then((res) => {",
                "        console.log('Pay', res);",
                "        if(res.errors) {",
                "          setTimeout(() => {",
                "            getPayInfo(success);",
                "          }, 5000);",
                "          return;",
                "        }",
                "        success && success(res);",
                "      })",
                "      .catch(() => {",
                "        setTimeout(() => {",
                "          getPayInfo(success);",
                "        }, 5000);",
                "      });",
                "  }",
                "  ",
                "  function playDanceAni() {",
                "    var animPath = \"./animations/welcome.keys\";  // path to animation file",
                "    var basePath = \"./animations\";             // base path for texture resolution",
                "    var animate = jibo.animate;",
                "    animate.createAnimationBuilderFromKeysPath(animPath, basePath, (builder) => {",
                "        // add listener",
                "        builder.on(animate.AnimationEventType.STOPPED, (eventType, instance, payload) => {",
                "            console.log(\"Animation stopped; was interrupted = \" + payload.interrupted);",
                "        });",
                "",
                "        // trigger an instance of the animation",
                "        builder.play();",
                "    });",
                "  }",
                "    ",
                "  function playSadAni() {",
                "    var animPath = \"./animations/dance.keys\";  // path to animation file",
                "    var basePath = \"./animations\";             // base path for texture resolution",
                "    var animate = jibo.animate;",
                "    animate.createAnimationBuilderFromKeysPath(animPath, basePath, (builder) => {",
                "        // add listener",
                "        builder.on(animate.AnimationEventType.STOPPED, (eventType, instance, payload) => {",
                "            console.log(\"Animation stopped; was interrupted = \" + payload.interrupted);",
                "        });",
                "",
                "        // trigger an instance of the animation",
                "        builder.play();",
                "    });",
                "    ",
                "  }",
                "  console.log('callbackSpeech', notepad);",
                "  const AI = notepad.ai;",
                "  let txt = 'Hi, I am Jibo, I just wake up, nice to meet you';",
                "  ",
                "  if(!AI || !AI.result) {",
                "    callback(txt);",
                "    return;",
                "  }",
                "  ",
                "  txt = AI.result.fulfillment.speech;",
                "  ",
                "  if(txt === notepad.txt) {",
                "    callback('I am thinking. I am thinking. I am thinking. eh... eh... Oh, I forgot it, pardon me?')",
                "    return;",
                "  }",
                "  notepad.txt = txt;",
                "  ",
                "  // donate",
                "  if (txt.match(/QR/i)) {",
                "    ",
                "    const qrCode = 'https://chart.googleapis.com/chart?chs=500x500&cht=qr&chl=https%3A%2F%2F4113studio.com%2F&choe=UTF-8';",
                "    //redraw every frame",
                "    jibo.face.renderOnlyWhenDirty = false; ",
                "    ",
                "    // create new Pixi sprite",
                "    notepad.photo = new PIXI.Sprite();",
                "",
                "    // set the texture of the sprite to the imageURL",
                "    notepad.photo.texture = PIXI.Texture.fromImage(qrCode);",
                "    notepad.photo.position.x = 1280/2;",
                "    notepad.photo.position.y = 720/2;",
                "    notepad.photo.anchor.x = 0.5;",
                "    notepad.photo.anchor.y = 0.5;",
                "    ",
                "    // jibo.face.stage.removeChildren(); ",
                "    // add the sprite to the stage",
                "    jibo.face.stage.addChild(notepad.photo);",
                "    ",
                "    ",
                "    setTimeout(() => {",
                "      getPayInfo((payInfo) => {",
                "        const recentTran = payInfo.transactions.shift();",
                "        const createTime = new Date(recentTran.created_at);",
                "        ",
                "        // more then 2 minute, transaction out of date",
                "        if(Date.now() - createTime.getTime() > 2*60*1000) {",
                "          callback(\"We do not receive your donation, I am so sad\");",
                "          playSadAni();",
                "        } else {",
                "          callback(\"Thank you for your donation\");",
                "          playDanceAni();",
                "        }",
                "        ",
                "        //remove the image from the screen",
                "        jibo.face.stage.removeChild(notepad.photo); ",
                "        ",
                "        //force draw",
                "        // jibo.face.update();",
                "        ",
                "        //render only when dof values are dirty",
                "        // jibo.face.renderOnlyWhenDirty = true; ",
                "      });",
                "    }, 10000);",
                "  }",
                "  ",
                "  // // dont donate",
                "  if (txt.match(/sad/)) {",
                "    console.log('sad');",
                "    playSadAni();",
                "  }",
                "  ",
                "  // dance",
                "  if (txt.match(/dancing/)) {",
                "    console.log('dance');",
                "    playDanceAni();",
                "  }",
                "  callback(txt);",
                "}"
            ],
            "onWord": [
                "(word) => {",
                "  // console.log('txtToSpeech', word);",
                "}"
            ]
        },
        "asset-pack": "core",
        "parent": 1,
        "decorators": []
    },
    "56364102-c1a9-4b30-b9f8-b44357ae1615": {
        "id": "56364102-c1a9-4b30-b9f8-b44357ae1615",
        "class": "WhileCondition",
        "name": "",
        "options": {
            "init": [
                "() => {",
                "}"
            ],
            "conditional": [
                "() => {",
                "    return true;",
                "}"
            ]
        },
        "asset-pack": "core"
    }
}